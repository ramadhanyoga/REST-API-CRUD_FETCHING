import Head from "next/head";
import { Container, Heading, Table, Td, Thead, Tr, Spinner, FormControl, FormLabel, Input, VStack, Button, Text, Alert, useToast } from "@chakra-ui/react";
import { useFetchProducts } from "@/features/product/useFetchProducts";
import { useFormik } from "formik";
import { useMutation } from "@tanstack/react-query";
import { axiosInstance } from "@/lib/axios";
import { useCreateProduct } from "@/features/product/useCreateProduct";
import { useDeleteProduct } from "@/features/product/useDeleteProduct";
import { useEditProduct } from "@/features/product/useEditProduct";
// chakra ui (css framwork)
// formik (handel form)
// yup (validate) atau zod
// axios (API calls)
// react-query (menage API Calls (handle casing, state, dll))

export default function Home() {
  const toast = useToast();

  const { data, isLoading: productIsLoading, refetch: refetchProdct} = useFetchProducts({
    onError: () => {
      toast({
        title: "Ada kesalahan terjadi",
        status: "error"
      });
    },
  });


  const formik = useFormik ({
    initialValues: {
      name: "",
      price: 0,
      description: "",
      image: "",
      id: 0,
    },
    onSubmit: () => {
      const {name, price, description, image, id} = formik.values;

      if (id) {
        //Melakukan Fatch product (id)
        editProduct({
          name,
          price: parseInt(price),
          description,
          image,
          id,
        });

        toast({
          title: "edit product succes",
          status: "success",
          duration: 8000,
        })
      } else {
        //Melakukan POST Product
        createProduct({
          name,
          price: parseInt(price),
          description,
          image, 
        });

        toast({
          title: "product berhasil ditambahkan",
          status: "success",
          duration: 8000,
        })
      }

      formik.setFieldValue("name", "")
      formik.setFieldValue("price", 0)
      formik.setFieldValue("description", "")
      formik.setFieldValue("image", "")
      formik.setFieldValue("id", "0")

    },
  });

  
  const { mutate: createProduct, isLoading: createProductIsLoading } = useCreateProduct({
    onSuccess: () => {
      refetchProdct();
    },
  });
  
  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetchProdct();
    }
  });

  const { mutate: editProduct, isLoading: editProductIsLoading} = useEditProduct({
    onSuccess: () => {
      refetchProdct();
    }
  });

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  } 
  
  const confirmationDelete = (productId) => {
    const shouldDelate = confirm("are you sure?");

    if (shouldDelate) {
      deleteProduct(productId);
      toast({
        title: "delate product success",
        status: "info",
      })
    }
  };

  const onEditClick = (product) => {
    formik.setFieldValue("id", product.id);
    formik.setFieldValue("name", product.name);
    formik.setFieldValue("price", product.price);
    formik.setFieldValue("description", product.description);
    formik.setFieldValue("image", product.image);
  };

  const renderProducts = () => {
    return data?.data.map((product) => {
      return (
        <Tr key={product.id}>
          <Td>{product.id}</Td>
          <Td>{product.name}</Td>
          <Td>{product.price}</Td>
          <Td>{product.description}</Td>
          <Td>
            <Button onClick={() => onEditClick(product)} colorScheme={"cyan"}>Edit {product.id}</Button>
          </Td>
          <Td>
            <Button onClick={() => confirmationDelete(product.id)} colorScheme={"red"}>Delete {product.id}</Button>
          </Td>
        </Tr>
      );
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container ml="2">
          <Heading>Home Page</Heading>
          <Table mb="6">
            <Thead>
              <Tr>
                <th>id</th>
                <th>name</th>
                <th>price</th>
                <th>description</th>
                <th colSpan={2}>action</th>
              </Tr>
            </Thead>
            <tbody>
              {renderProducts()}
              {productIsLoading && <Spinner />}
            </tbody>
          </Table>
          <form onSubmit={formik.handleSubmit}>
            <VStack spacing="3">
              <FormControl>
                <FormLabel>Product ID</FormLabel>
                <Input onChange={handleFormInput} name="id" value={formik.values.id} />
              </FormControl>
              <FormControl>
                <FormLabel>Product Name</FormLabel>
                <Input onChange={handleFormInput} name="name" value={formik.values.name} />
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <Input onChange={handleFormInput} name="price" value={formik.values.price}/>
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input onChange={handleFormInput} name="description" value={formik.values.description}/>
              </FormControl>
              <FormControl>
                <FormLabel>Image</FormLabel>
                <Input onChange={handleFormInput} name="image" value={formik.values.image} />
              </FormControl>
              {createProductIsLoading || editProductIsLoading ? ( <Spinner />) : (
                <Button type="submit">Submit Product</Button>
              )}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
